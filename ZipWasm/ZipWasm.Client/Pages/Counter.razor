@page "/"
@using System.IO.Compression;
@rendermode InteractiveWebAssembly
@using System.Drawing;
@using System.IO.Compression;
@using System.Net.Security;
@using System.Text;
@using System.Xml.Linq;
@using VCDiff.Decoders;
@using VCDiff.Encoders;
@using VCDiff.Includes;
@using ZipWasm.Client.Helpers;
@using ZstdNet;
@inject IJSRuntime JSRuntime;

<style>
    .fixed_div {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: transparent;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

<MudPopoverProvider />
<div class="fixed_div" style="z-index: 3;">
    <MudDropContainer T="DropItem" @ref="_dropContainer" Items="_items.Values" CanDropClass="mud-border-info" NoDropClass="mud-border-error" CanDrop="@((item, rowCol ) => CanDrop(item, rowCol))" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated">
        <ChildContent>
            @for (int r = 0; r < 7; r++)
            {
                var row = r.ToString();
                <div class="d-flex">
                    @for (int c = 0; c < 20; c++)
                    {
                        var col = c.ToString();
                        <MudMenu ActivationEvent="@MouseEvent.LeftClick" Dense="true">
                            <ActivatorContent>
                                <MudDropZone T="DropItem" Identifier="@($"{row}-{col}")" DraggingClass="mud-theme-success" Class="@GetClass($"{row}-{col}")" Style="height:80px;width:80px;">
                                    @if (IsEmptyDiffOrUndiffSourceInputBox($"{row}-{col}"))
                                    {
                                        <MudText style="opacity: 0.3;">Source</MudText>
                                    }
                                    else if (IsEmptyDiffTargetInputBox($"{row}-{col}"))
                                    {
                                        <MudText style="opacity: 0.3;">Target</MudText>
                                    }
                                    else if (IsEmptyUnDiffTargetInputBox($"{row}-{col}"))
                                    {
                                        <MudText style="opacity: 0.3;">Delta</MudText>
                                    }
                                    else if (IsEmptyResultBox($"{row}-{col}"))
                                    {
                                        <MudText style="opacity: 0.3;">Out</MudText>
                                    }
                                    else if (IsEmptyCompressInputBox($"{row}-{col}"))
                                    {
                                        <MudText style="opacity: 0.3;">In</MudText>
                                    }
                                </MudDropZone>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem hidden="@IsMenuItemHidden($"{row}-{col}", MenuFunction.Upload)">
                                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" MaximumFileCount="@int.MaxValue" FilesChanged="@(param => UploadFiles(param, $"{row}-{col}"))">
                                        <ActivatorContent>
                                            <MudButton Color="MudBlazor.Color.Dark">Upload</MudButton>
                                        </ActivatorContent>
                                    </MudFileUpload>
                                </MudMenuItem>
                                <MudMenuItem Label="Copy" hidden="@IsMenuItemHidden($"{row}-{col}", MenuFunction.Copy)" OnClick="@(_ => Copy(int.Parse(row), int.Parse(col)))" />
                                <MudMenuItem Label="Paste" hidden="@IsMenuItemHidden($"{row}-{col}", MenuFunction.Paste)" OnClick="@(_ => Paste(int.Parse(row), int.Parse(col)))" />

                                <MudMenu Label="Compress" Dense="true" hidden="@IsMenuItemHidden($"{row}-{col}", MenuFunction.Process)">
                                    <MudMenuItem Label="Gzip" OnClick="@(_ => AddFunc(_fileOperations.Gzip, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Deflate" OnClick="@(_ => AddFunc(_fileOperations.Deflate, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Brotli" OnClick="@(_ => AddFunc(_fileOperations.Brotli, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Zstd" OnClick="@(_ => AddFunc(_fileOperations.Zstd, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Diff" OnClick="@(_ => AddFunc(_fileOperations.Diff, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Diff))" />
                                </MudMenu>
                                <MudMenu Label="Decompress" Dense="true" hidden="@IsMenuItemHidden($"{row}-{col}", MenuFunction.Process)">
                                    <MudMenuItem Label="Un-Gzip" OnClick="@(_ => AddFunc(_fileOperations.Un_Gzip, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Un-Deflate" OnClick="@(_ => AddFunc(_fileOperations.Un_Deflate, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Un-Brotli" OnClick="@(_ => AddFunc(_fileOperations.Un_Brotli, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Un-Zstd" OnClick="@(_ => AddFunc(_fileOperations.Un_Zstd, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Compress))" />
                                    <MudMenuItem Label="Un-Diff" OnClick="@(_ => AddFunc(_fileOperations.Un_Diff, $"{row}-{col}", @Icons.Custom.Uncategorized.Empty, DropItem.ItemType.Undiff))" />
                                </MudMenu>
                                <MudMenuItem Label="Download" hidden="@IsMenuItemHidden($"{row}-{col}", MenuFunction.Download)" OnClick="@(_ => DownloadFiles(int.Parse(row), int.Parse(col)))" />
                                <MudMenuItem Label="Delete" hidden="@IsMenuItemHidden($"{row}-{col}", MenuFunction.Delete)" OnClick="@(_ => DeleteItemAt($"{row}-{col}"))" />
                            </ChildContent>
                        </MudMenu>
                    }
                </div>
            }
        </ChildContent>
        <ItemRenderer>
            <MudTooltip>
                <ChildContent>
                    <MudBadge Overlap="false" Bordered="false" Content="@(context.Order == null ? "" : context.Order)" Color="@context.Color" style="height: 100%; width: 100%;">
                        <MudText style="height: 100%; width: 100%; font-size: 12px;" Typo="Typo.button">@GetInfo(context)</MudText>
                    </MudBadge>
                </ChildContent>
                <TooltipContent>
                    <MudText Typo="Typo.body2">@GetInfo(context)</MudText>
                    <MudText Typo="Typo.body2">@GetDirSize(context)</MudText>
                    <MudText Typo="Typo.body2">@GetRatio(context)</MudText>
                </TooltipContent>
            </MudTooltip>
        </ItemRenderer>
    </MudDropContainer>

</div>

@code {
    public enum MenuFunction
    {
        Upload,
        Process,
        Delete,
        Download,
        Copy,
        Paste,
    }

    private string GetClass(string rowCol)
    {
        string inputClass = "d-flex justify-center align-center border-2 border-solid docs-gray-bg border-dashed";
        string outputClass = "d-flex justify-center align-center border-2 border-solid docs-gray-bg border-dashed mud-border-success";
        string normalClass = "d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default";

        if (IsDiffInputBox(rowCol) != null)
        {
            return inputClass;
        }

        if (IsCompressInputBox(rowCol) != null)
        {
            return inputClass;
        }

        if (IsResultBox(rowCol) != null)
        {
            return outputClass;
        }

        return normalClass;
    }

    private DropItem? IsResultBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? output = GetItemAt(row, col - 1);
        if (output != null && (output.Type == DropItem.ItemType.Compress || output.Type == DropItem.ItemType.Diff || output.Type == DropItem.ItemType.Undiff))
        {
            return output;
        }

        return null;
    }

    private bool IsEmptyDiffOrUndiffSourceInputBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? diffItem = GetItemAt(row + 1, col);
        if (diffItem != null && (diffItem.Type == DropItem.ItemType.Diff || diffItem.Type == DropItem.ItemType.Undiff))
        {
            return !_items.ContainsKey(rowCol);
        }

        return false;
    }

    private bool IsEmptyDiffTargetInputBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? diffItem = GetItemAt(row - 1, col);
        if (diffItem != null && diffItem.Type == DropItem.ItemType.Diff)
        {
            return !_items.ContainsKey(rowCol);
        }

        return false;
    }

    private bool IsEmptyUnDiffTargetInputBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? diffItem = GetItemAt(row - 1, col);
        if (diffItem != null && diffItem.Type == DropItem.ItemType.Undiff)
        {
            return !_items.ContainsKey(rowCol);
        }

        return false;
    }

    private bool IsEmptyResultBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? funcItem = GetItemAt(row, col - 1);
        if (funcItem != null && (funcItem.Type == DropItem.ItemType.Undiff || funcItem.Type == DropItem.ItemType.Diff || funcItem.Type == DropItem.ItemType.Compress))
        {
            return !_items.ContainsKey(rowCol);
        }

        return false;
    }

    private DropItem? IsDiffInputBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? diffSource = GetItemAt(row + 1, col);
        if (diffSource != null && (diffSource.Type == DropItem.ItemType.Diff || diffSource.Type == DropItem.ItemType.Undiff))
        {
            return diffSource;
        }

        DropItem? diffTarget = GetItemAt(row - 1, col);
        if (diffTarget != null && (diffTarget.Type == DropItem.ItemType.Diff || diffTarget.Type == DropItem.ItemType.Undiff))
        {
            return diffTarget;
        }

        return null;
    }

    private bool IsEmptyCompressInputBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? compItem = GetItemAt(row, col + 1);
        if (compItem != null && compItem.Type == DropItem.ItemType.Compress)
        {
            return !_items.ContainsKey(rowCol);
        }

        return false;
    }

    private DropItem? IsCompressInputBox(string rowCol)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? compressSource = GetItemAt(row, col + 1);
        if (compressSource != null && compressSource.Type == DropItem.ItemType.Compress)
        {
            return compressSource;
        }

        return null;
    }

    private bool CanDrop(DropItem item, string rowCol)
    {
        bool freeBox = !_items.ContainsKey(rowCol) && item.Type != DropItem.ItemType.Result;
        DropItem? result = IsResultBox(rowCol);

        if (item.Type == DropItem.ItemType.Upload)
        {
            return freeBox && result == null;
        }

        if (item.Type == DropItem.ItemType.Diff || item.Type == DropItem.ItemType.Undiff || item.Type == DropItem.ItemType.Compress)
        {
            DropItem? diff = IsDiffInputBox(rowCol);
            DropItem? compress = IsCompressInputBox(rowCol);
            if (item == diff || item == compress || item == result)
            {
                return true;
            }

            return freeBox && diff == null && compress == null && result == null;
        }

        return freeBox;
    }

    private FileOperations _fileOperations = new FileOperations();
    private MudDropContainer<DropItem> _dropContainer;
    private DropItem? _copiedItem;

    private void EvaluateFunc(DropItem funcItem)
    {
        if (funcItem.Func == null)
        {
            return;
        }

        DateTime start = DateTime.Now;
        HashSet<string> inputIds = funcItem.InputIds;
        List<DropItem> inputItems = new();
        foreach (string inputId in inputIds)
        {
            if (_items.TryGetValue(inputId, out DropItem? input))
            {
                inputItems.Add(input);
            }
        }

        // RemoveResult(funcItem.ResultId);

        // Evaluate
        if (inputItems != null)
        {
            if (inputItems.Count() == 1 && funcItem.Type == DropItem.ItemType.Compress)
            {
                var inputItem = inputItems[0];
                if (inputItem.Type == DropItem.ItemType.Result || inputItem.Type == DropItem.ItemType.Upload)
                {
                    DirectoryInfo inputDir = new DirectoryInfo(inputItem.Path);
                    string resultPath = null;

                    KeyValuePair<string, Result> res = funcItem.Func.Invoke(inputDir, null);
                    resultPath = res.Key;

                    if (resultPath != null)
                    {
                        AddResult(resultPath, funcItem.ResultId);
                    }
                }
            }
            else if (inputItems.Count() == 2 && (funcItem.Type == DropItem.ItemType.Diff || funcItem.Type == DropItem.ItemType.Undiff))
            {
                // To ensure order
                var inputItem1 = inputItems[0];
                var inputItem2 = inputItems[1];

                if (inputItem1.Type == DropItem.ItemType.Result || inputItem1.Type == DropItem.ItemType.Upload
                && inputItem2.Type == DropItem.ItemType.Result || inputItem2.Type == DropItem.ItemType.Upload)
                {
                    DirectoryInfo inputDir1 = new DirectoryInfo(inputItem1.Path);
                    DirectoryInfo inputDir2 = new DirectoryInfo(inputItem2.Path);
                    string resultPath = null;

                    KeyValuePair<string, Result> res = funcItem.Func.Invoke(inputDir1, inputDir2);
                    resultPath = res.Key;

                    if (resultPath != null)
                    {
                        AddResult(resultPath, funcItem.ResultId);
                    }
                }
            }
        }
    }

    private DropItem? GetItemAt(int row, int col)
    {
        string resultId = string.Format("{0}-{1}", row, col);
        _items.TryGetValue(resultId, out DropItem? item);
        return item;
    }

    private async Task Copy(int row, int col)
    {
        _copiedItem = GetItemAt(row, col);
    }

    private async Task Paste(int row, int col)
    {
        string rowCol = string.Format("{0}-{1}", row, col);
        DropItem? item = GetItemAt(row, col);
        if (item == null && _copiedItem != null)
        {
            if (_copiedItem.Type == DropItem.ItemType.Result)
            {
                AddUpload(_copiedItem.Path, rowCol);
            }
            else
            {
                DropItem result = new DropItem(rowCol, _copiedItem, _fileOperations);
                _items.Add(result.Identifier, result);
                EvaluateAll();
            }
        }
    }

    private async Task DeleteItemAt(string rowCol)
    {
        _items.Remove(rowCol);
        EvaluateAll();
    }

    private bool IsMenuItemHidden(string rowCol, MenuFunction func)
    {
        var split = DropItem.RowCol(rowCol);
        int row = split.Item1;
        int col = split.Item2;

        DropItem? item = GetItemAt(row, col);

        // No item at present
        if (item == null)
        {
            if (func == MenuFunction.Upload)
            {
                return false;
            }
            if (func == MenuFunction.Process)
            {
                return false;
            }
            if (func == MenuFunction.Delete)
            {
                return true;
            }
            if (func == MenuFunction.Download)
            {
                return true;
            }
            if (func == MenuFunction.Paste && _copiedItem != null)
            {
                return false;
            }
            if (func == MenuFunction.Copy)
            {
                return true;
            }
        }
        // Item present
        else
        {
            if (func == MenuFunction.Upload)
            {
                return true;
            }
            if (func == MenuFunction.Process)
            {
                return true;
            }
            if (func == MenuFunction.Delete)
            {
                if (item.Type == DropItem.ItemType.Result)
                {
                    return true;
                }
                return false;
            }
            if (func == MenuFunction.Download)
            {
                if (item.Type == DropItem.ItemType.Result || item.Type == DropItem.ItemType.Upload)
                {
                    return false;
                }
                return true;
            }
            if (func == MenuFunction.Paste)
            {
                return true;
            }
            if (func == MenuFunction.Copy)
            {
                return false;
            }
        }
        return true;
    }

    private string GetRatio(DropItem item)
    {
        if (item.Type == DropItem.ItemType.Compress || item.Type == DropItem.ItemType.Diff || item.Type == DropItem.ItemType.Undiff)
        {
            (int, int) rowCol = DropItem.RowCol(item.Identifier);
            var result = GetItemAt(rowCol.Item1, rowCol.Item2 + 1);
            if (result != null)
            {
                Result res = _fileOperations.GetResult(result.Path);
                return Math.Round(res.Ratio * 100, 1) + "%";
            }
        }
        return "";
    }

    private string GetInfo(DropItem item)
    {
        if (item.Type == DropItem.ItemType.Compress || item.Type == DropItem.ItemType.Diff || item.Type == DropItem.ItemType.Undiff)
        {
            return item.Func.Method.Name;
        }
        else if (item.Type == DropItem.ItemType.Upload)
        {
            if (string.IsNullOrEmpty(item.Path))
            {
                return "N/A";
            }

            DirectoryInfo dir = new DirectoryInfo(item.Path);
            long dirSize = dir.EnumerateFiles("*", SearchOption.TopDirectoryOnly).Sum(file => file.Length);
            return FileOperations.ConvertBytesToReadableUnit(dirSize);
        }
        else if (item.Type == DropItem.ItemType.Result)
        {
            if (string.IsNullOrEmpty(item.Path))
            {
                return "N/A";
            }

            //Result res = _fileOperations.GetResult(item.Path);
            DirectoryInfo dir = new DirectoryInfo(item.Path);
            long dirSize = dir.EnumerateFiles("*", SearchOption.TopDirectoryOnly).Sum(file => file.Length);
            return FileOperations.ConvertBytesToReadableUnit(dirSize);
        }

        return "ERR";
    }

    private string GetDirSize(DropItem item)
    {
        if (item.Type == DropItem.ItemType.Compress || item.Type == DropItem.ItemType.Diff || item.Type == DropItem.ItemType.Undiff)
        {
            (int, int) rowCol = DropItem.RowCol(item.Identifier);
            var result = GetItemAt(rowCol.Item1, rowCol.Item2 + 1);
            string dur = "";
            if (result != null)
            {
                Result res = _fileOperations.GetResult(result.Path);
                dur = " " + FileOperations.FormatTimeSpan(res.Duration);
            }
            return dur;
        }
        else
        {
            return item.Path;
        }
    }

    private async Task DownloadFiles(int row, int col)
    {
        DropItem? item = GetItemAt(row, col);
        if (item == null || item.Path == null)
        {
            return;
        }

        DirectoryInfo dir = new DirectoryInfo(item.Path);
        foreach (FileInfo file in dir.GetFiles())
        {
            // Encode content as a Base64 string
            using var streamRef = new DotNetStreamReference(stream: file.OpenRead());

            // Invoke the JavaScript function
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", file.Name, streamRef);
        }
    }

    private async Task AddFunc(Func<DirectoryInfo, DirectoryInfo, KeyValuePair<string, Result>> func, string rowCol, string icon, DropItem.ItemType type)
    {
        _items.Remove(rowCol);

        RemoveResult(rowCol);

        DropItem newItem = new DropItem(type, icon, rowCol, null, func, _fileOperations);
        _items.Add(newItem.Identifier, newItem);

        EvaluateAll();
    }

    private void AddResult(string? path, string newRowCol)
    {
        _items.Remove(newRowCol);

        DropItem result = new DropItem(DropItem.ItemType.Result, @Icons.Material.TwoTone.InsertDriveFile, newRowCol, path, null, _fileOperations);
        _items.Add(result.Identifier, result);
    }

    private void RemoveResult(string prevRowCol)
    {
        _items.TryGetValue(prevRowCol, out DropItem? prevItem);
        if (prevItem != null && prevItem.Type == DropItem.ItemType.Result)
        {
            _items.Remove(prevItem.Identifier);
        }
    }

    private void AddUpload(string path, string rowCol)
    {
        _items.Remove(rowCol);

        DropItem newItem = new DropItem(DropItem.ItemType.Upload, @Icons.Material.TwoTone.AttachFile, rowCol, path, null, _fileOperations);
        _items.Add(newItem.Identifier, newItem);

        EvaluateAll();
    }

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files, string rowCol)
    {
        DirectoryInfo dir = _fileOperations.GetNextDir();
        foreach (var file in files)
        {
            string filePath = Path.Combine(dir.FullName, file.Name);
            await file.OpenReadStream(1000000000).CopyToAsync(File.Create(filePath));
        }

        AddUpload(dir.FullName, rowCol);
    }

    private async Task ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        _items.Remove(dropItem.Item.Identifier);
        dropItem.Item.MoveTo(dropItem.DropzoneIdentifier);
        _items.Add(dropItem.Item.Identifier, dropItem.Item);

        EvaluateAll();
    }

    private void EvaluateAll()
    {
        DateTime start = DateTime.Now;
        DeleteAllResults();
        bool allEvaluated = false;

        int i = 0;
        while (!allEvaluated)
        {
            i++;
            int count = _items.Count();
            var funcItems = _items.Values.Where(i => i.Type == DropItem.ItemType.Diff || i.Type == DropItem.ItemType.Undiff || i.Type == DropItem.ItemType.Compress).ToList();
            foreach (var item in funcItems)
            {
                EvaluateFunc(item);
            }
            // No new items have appeared during this loop
            allEvaluated = count == _items.Count();
        }
        _dropContainer.Refresh();
    }

    private void DeleteAllResults()
    {
        DateTime start = DateTime.Now;
        foreach (var item in _items.Values.ToList())
        {
            if (item.Type == DropItem.ItemType.Result)
            {
                _items.Remove(item.Identifier);
            }
        }
    }

    private bool MissingInput(DropItem item)
    {
        if (item.Type != DropItem.ItemType.Compress || item.Type != DropItem.ItemType.Diff || item.Type != DropItem.ItemType.Undiff)
        {
            return false;
        }

        var rowCol = DropItem.RowCol(item.Identifier);
        var row = rowCol.Item1;
        var col = rowCol.Item2;

        _items.TryGetValue(string.Format("{0}-{1}", row, col - 1), out DropItem? inputItem);

        return inputItem == default(DropItem);
    }

    private Dictionary<string, DropItem> _items = new();

    public class DropItem
    {
        public enum ItemType
        {
            Compress,
            Diff,
            Undiff,
            Upload,
            Result
        }
        public DropItem(ItemType type, string icon, string id, string path, Func<DirectoryInfo, DirectoryInfo, KeyValuePair<string, Result>> func, FileOperations oper)
        {
            Identifier = id;
            Type = type;
            Icon = icon;
            Path = path;
            Func = func;
            SetColor();
            SetInputs();
            Order = oper.GetDirOrder(Path);
        }

        public DropItem(string id, DropItem other, FileOperations oper)
        {
            Identifier = id;
            Type = other.Type;
            Icon = other.Icon;
            Path = other.Path;
            Func = other.Func;
            SetColor();
            SetInputs();
            Order = oper.GetDirOrder(Path);
        }

        private void SetColor()
        {
            switch (Type)
            {
                case ItemType.Upload:
                    Color = MudBlazor.Color.Info;
                    break;
                case ItemType.Compress:
                    Color = MudBlazor.Color.Transparent;
                    break;
                case ItemType.Diff:
                    Color = MudBlazor.Color.Transparent;
                    break;
                case ItemType.Undiff:
                    Color = MudBlazor.Color.Transparent;
                    break;
                case ItemType.Result:
                    Color = MudBlazor.Color.Success;
                    break;
            }
        }

        public ItemType Type { get; private set; }
        public string Icon { get; private init; }
        public Func<DirectoryInfo, DirectoryInfo, KeyValuePair<string, Result>> Func { get; private set; }
        public MudBlazor.Color Color { get; private set; }
        public string Identifier { get; set; }
        public string Path { get; set; }
        public HashSet<string> InputIds { get; private set; } = new();
        public string ResultId { get; private set; }
        public int? Order { get; init; }

        private void SetInputs()
        {
            var rowCol = DropItem.RowCol(Identifier);
            var row = rowCol.Item1;
            var col = rowCol.Item2;

            if (Type == ItemType.Compress)
            {
                InputIds.Clear();
                InputIds.Add(string.Format("{0}-{1}", row, col - 1));
                ResultId = string.Format("{0}-{1}", row, col + 1);
            }
            else if (Type == ItemType.Diff || Type == ItemType.Undiff)
            {
                InputIds.Clear();
                InputIds.Add(string.Format("{0}-{1}", row - 1, col));
                InputIds.Add(string.Format("{0}-{1}", row + 1, col));
                ResultId = string.Format("{0}-{1}", row, col + 1);
            }
        }

        public static (int, int) RowCol(string rowCol)
        {
            string[] parts = rowCol.Split("-");
            int row = int.Parse(parts[0]);
            int col = int.Parse(parts[1]);
            return (row, col);
        }

        public void MoveTo(string newId)
        {
            Identifier = newId;
            string[] parts = newId.Split("-");
            int row = int.Parse(parts[0]);
            int col = int.Parse(parts[1]);
            SetInputs();
        }
    }
}
